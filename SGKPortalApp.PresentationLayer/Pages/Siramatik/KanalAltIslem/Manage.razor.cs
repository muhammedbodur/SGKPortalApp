using Microsoft.AspNetCore.Components;
using SGKPortalApp.BusinessObjectLayer.DTOs.Request.SiramatikIslemleri;
using SGKPortalApp.BusinessObjectLayer.DTOs.Response.SiramatikIslemleri;
using SGKPortalApp.BusinessObjectLayer.DTOs.Response.Common;
using SGKPortalApp.BusinessObjectLayer.Enums.Common;
using SGKPortalApp.PresentationLayer.Models.FormModels.SiramatikIslemleri;
using SGKPortalApp.PresentationLayer.Services.ApiServices.Interfaces.Siramatik;
using SGKPortalApp.PresentationLayer.Services.ApiServices.Interfaces.Common;
using SGKPortalApp.PresentationLayer.Services.UIServices.Interfaces;

namespace SGKPortalApp.PresentationLayer.Pages.Siramatik.KanalAltIslem
{
    public partial class Manage
    {
        [Inject] private IKanalAltIslemApiService _kanalAltIslemService { get; set; } = default!;
        [Inject] private IKanalIslemApiService _kanalIslemService { get; set; } = default!;
        [Inject] private IKanalAltApiService _kanalAltService { get; set; } = default!;
        [Inject] private IHizmetBinasiApiService _hizmetBinasiService { get; set; } = default!;
        [Inject] private IToastService _toastService { get; set; } = default!;
        [Inject] private NavigationManager _navigationManager { get; set; } = default!;
        [Inject] private ILogger<Manage> _logger { get; set; } = default!;

        [Parameter] public int? KanalAltIslemId { get; set; }
        
        [Parameter]
        [SupplyParameterFromQuery]
        public int? HizmetBinasiId { get; set; }

        // State
        private bool isLoading = false;
        private bool isSaving = false;
        private bool IsEditMode => KanalAltIslemId.HasValue && KanalAltIslemId.Value > 0;

        // Form Model
        private KanalAltIslemFormModel model = new();
        private bool isAktif = true;

        // Lookup Data
        private List<HizmetBinasiResponseDto> hizmetBinalari = new();
        private List<KanalIslemResponseDto> kanalIslemler = new();
        private List<KanalAltResponseDto> kanalAltlar = new();
        private int selectedHizmetBinasiId = 0;
        private string hizmetBinasiAdi = string.Empty;

        // Edit Mode Data
        private DateTime eklenmeTarihi = DateTime.Now;
        private DateTime? duzenlenmeTarihi;

        protected override async Task OnInitializedAsync()
        {
            await LoadDropdownData();

            if (IsEditMode)
            {
                await LoadKanalAltIslem();
            }
            else
            {
                // Yeni kayƒ±t i√ßin varsayƒ±lan deƒüerler
                model = new KanalAltIslemFormModel
                {
                    HizmetBinasiId = 0,
                    KanalIslemId = 0,
                    KanalAltId = 0,
                    Aktiflik = Aktiflik.Aktif
                };

                // URL'den hizmet binasƒ± parametresi geldiyse otomatik se√ß
                if (HizmetBinasiId.HasValue && HizmetBinasiId.Value > 0)
                {
                    selectedHizmetBinasiId = HizmetBinasiId.Value;
                    model.HizmetBinasiId = HizmetBinasiId.Value;
                    await LoadKanalIslemler();
                    _logger.LogInformation($"üîó URL'den HizmetBinasiId alƒ±ndƒ±: {HizmetBinasiId.Value}");
                }

                isAktif = true;
            }
        }

        private async Task LoadDropdownData()
        {
            try
            {
                // Hizmet binalarƒ±nƒ± y√ºkle
                var binaResult = await _hizmetBinasiService.GetActiveAsync();
                if (binaResult.Success && binaResult.Data != null)
                {
                    hizmetBinalari = binaResult.Data;
                }
                else
                {
                    hizmetBinalari = new();
                    await _toastService.ShowWarningAsync("Hizmet binalarƒ± y√ºklenemedi");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Dropdown verileri y√ºklenirken hata olu≈ütu");
                await _toastService.ShowErrorAsync("Veriler y√ºklenirken bir hata olu≈ütu");
            }
        }

        private async Task LoadKanalIslemler()
        {
            if (selectedHizmetBinasiId <= 0)
            {
                kanalIslemler = new();
                return;
            }

            try
            {
                var result = await _kanalIslemService.GetByHizmetBinasiIdAsync(selectedHizmetBinasiId);

                if (result.Success && result.Data != null)
                {
                    kanalIslemler = result.Data.Where(k => k.Aktiflik == Aktiflik.Aktif).ToList();
                }
                else
                {
                    kanalIslemler = new();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Kanal i≈ülemler y√ºklenirken hata olu≈ütu");
                kanalIslemler = new();
            }
        }

        private async Task OnHizmetBinasiChanged(ChangeEventArgs e)
        {
            if (int.TryParse(e.Value?.ToString(), out int binaId))
            {
                selectedHizmetBinasiId = binaId;
                model.HizmetBinasiId = binaId; // Model'i de g√ºncelle
                model.KanalIslemId = 0; // Kanal i≈ülem se√ßimini sƒ±fƒ±rla
                model.KanalAltId = 0; // Alt i≈ülem se√ßimini sƒ±fƒ±rla
                kanalAltlar = new(); // Alt i≈ülem listesini temizle
                await LoadKanalIslemler();
                StateHasChanged();
            }
        }

        private async Task OnKanalIslemChanged(ChangeEventArgs e)
        {
            if (int.TryParse(e.Value?.ToString(), out int kanalIslemId))
            {
                model.KanalIslemId = kanalIslemId;
                model.KanalAltId = 0; // Alt i≈ülem se√ßimini sƒ±fƒ±rla
                await LoadKanalAltlar();
                StateHasChanged();
            }
        }

        private async Task LoadKanalAltlar()
        {
            if (model.KanalIslemId <= 0)
            {
                kanalAltlar = new();
                return;
            }

            try
            {
                // Se√ßilen KanalIslem'in Kanal'ƒ±na ait KanalAlt'larƒ± getir
                // √ñnce KanalIslem'den KanalId'yi bulalƒ±m
                var kanalIslem = kanalIslemler.FirstOrDefault(k => k.KanalIslemId == model.KanalIslemId);
                if (kanalIslem == null || kanalIslem.KanalId <= 0)
                {
                    kanalAltlar = new();
                    return;
                }

                var result = await _kanalAltService.GetByKanalIdAsync(kanalIslem.KanalId);

                if (result.Success && result.Data != null)
                {
                    kanalAltlar = result.Data.Where(k => k.Aktiflik == Aktiflik.Aktif).ToList();
                    _logger.LogInformation($"‚úÖ {kanalAltlar.Count} aktif kanal alt y√ºklendi (KanalId: {kanalIslem.KanalId})");
                }
                else
                {
                    kanalAltlar = new();
                    if (!string.IsNullOrEmpty(result.Message))
                    {
                        _logger.LogWarning($"‚ö†Ô∏è KanalAlt'lar y√ºklenemedi: {result.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå KanalAlt'lar y√ºklenirken hata olu≈ütu");
                kanalAltlar = new();
            }
        }

        private async Task LoadKanalAltIslem()
        {
            try
            {
                isLoading = true;
                var result = await _kanalAltIslemService.GetByIdWithDetailsAsync(KanalAltIslemId!.Value);

                if (result.Success && result.Data != null)
                {
                    var altIslem = result.Data;
                    
                    model = new KanalAltIslemFormModel
                    {
                        KanalAltId = altIslem.KanalAltId,
                        KanalIslemId = altIslem.KanalIslemId,
                        HizmetBinasiId = altIslem.HizmetBinasiId,
                        Aktiflik = altIslem.Aktiflik
                    };

                    // Hizmet binasƒ±nƒ± se√ß ve hizmet binasƒ± adƒ±nƒ± bul (edit modda readonly input i√ßin)
                    selectedHizmetBinasiId = altIslem.HizmetBinasiId;
                    var bina = hizmetBinalari.FirstOrDefault(b => b.HizmetBinasiId == altIslem.HizmetBinasiId);
                    hizmetBinasiAdi = bina?.HizmetBinasiAdi ?? "Bilinmeyen";

                    // Kanal i≈ülemleri y√ºkle
                    await LoadKanalIslemler();

                    // Kanal i≈ülem se√ßili olduƒüunda KanalAlt'larƒ± da y√ºkle
                    await LoadKanalAltlar();

                    isAktif = altIslem.Aktiflik == Aktiflik.Aktif;
                    eklenmeTarihi = altIslem.EklenmeTarihi;
                    duzenlenmeTarihi = altIslem.DuzenlenmeTarihi;
                }
                else
                {
                    await _toastService.ShowErrorAsync(result.Message ?? "Alt i≈ülem bulunamadƒ±");
                    _navigationManager.NavigateTo("/siramatik/kanal-alt-islem");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Alt i≈ülem y√ºklenirken hata olu≈ütu");
                await _toastService.ShowErrorAsync("Alt i≈ülem y√ºklenirken bir hata olu≈ütu");
                _navigationManager.NavigateTo("/siramatik/kanal-alt-islem");
            }
            finally
            {
                isLoading = false;
            }
        }

        private async Task HandleSubmit()
        {
            try
            {
                isSaving = true;

                // Aktiflik durumunu modele aktar
                model.Aktiflik = isAktif ? Aktiflik.Aktif : Aktiflik.Pasif;

                // HizmetBinasiId'yi modele aktar
                model.HizmetBinasiId = selectedHizmetBinasiId;

                // Validasyon DataAnnotations tarafƒ±ndan yapƒ±lƒ±yor
                _logger.LogInformation($"üìù Form submit - KanalAltId: {model.KanalAltId}, KanalIslemId: {model.KanalIslemId}, HizmetBinasiId: {model.HizmetBinasiId}");

                if (IsEditMode)
                {
                    await UpdateKanalAltIslem();
                }
                else
                {
                    await CreateKanalAltIslem();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Form g√∂nderilirken hata olu≈ütu");
                await _toastService.ShowErrorAsync("ƒ∞≈ülem sƒ±rasƒ±nda bir hata olu≈ütu");
            }
            finally
            {
                isSaving = false;
            }
        }

        private async Task CreateKanalAltIslem()
        {
            var createDto = new KanalAltCreateRequestDto
            {
                KanalAltId = model.KanalAltId,
                KanalIslemId = model.KanalIslemId,
                HizmetBinasiId = model.HizmetBinasiId,
                Sira = model.Sira,
                Aktiflik = model.Aktiflik
            };

            var result = await _kanalAltIslemService.CreateAsync(createDto);

            if (result.Success)
            {
                await _toastService.ShowSuccessAsync("Kanal alt i≈ülem ba≈üarƒ±yla eklendi");
                _navigationManager.NavigateTo("/siramatik/kanal-alt-islem");
            }
            else
            {
                await _toastService.ShowErrorAsync(result.Message ?? "Alt i≈ülem eklenemedi");
            }
        }

        private async Task UpdateKanalAltIslem()
        {
            var updateDto = new KanalAltUpdateRequestDto
            {
                KanalAltId = model.KanalAltId,
                KanalIslemId = model.KanalIslemId,
                HizmetBinasiId = model.HizmetBinasiId,
                Sira = model.Sira,
                Aktiflik = model.Aktiflik
            };

            var result = await _kanalAltIslemService.UpdateAsync(KanalAltIslemId!.Value, updateDto);

            if (result.Success)
            {
                await _toastService.ShowSuccessAsync("Kanal alt i≈ülem ba≈üarƒ±yla g√ºncellendi");
                _navigationManager.NavigateTo("/siramatik/kanal-alt-islem");
            }
            else
            {
                await _toastService.ShowErrorAsync(result.Message ?? "Alt i≈ülem g√ºncellenemedi");
            }
        }

        private void NavigateBack()
        {
            _navigationManager.NavigateTo("/siramatik/kanal-alt-islem");
        }
    }
}
