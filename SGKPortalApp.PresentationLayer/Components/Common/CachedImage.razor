@using SGKPortalApp.PresentationLayer.Services.UIServices.Interfaces
@*
    ⭐ GÜNCELLENMIŞ CachedImage Component
    
    ANAHTAR:
    - Server-side IImageCacheService'den ETag'i alıyor
    - Her resim güncellemede otomatik yeni ETag döndürülüyor
    - Browser cache problemi çözüldü ✅
    
    Kullanım: 
    <CachedImage Src="@Personel.Resim" Alt="Personel Fotoğrafı" Class="img-fluid rounded-circle" />
    <CachedImage Src="/images/avatars/28165202398.jpg" Alt="Avatar" />
*@

@inject IImageCacheService ImageCacheService
@inject ILogger<CachedImage> Logger

@if (!string.IsNullOrEmpty(Src))
{
    <img src="@GetCachedUrl()"
         alt="@(Alt ?? "Resim")"
         class="@(Class ?? "img-fluid")"
         style="@Style"
         width="@Width"
         height="@Height"
         loading="lazy"
         onerror="this.src='/images/placeholder.png'" />
}
else
{
    <!-- Placeholder görüntü -->
    <img src="/images/placeholder.png"
         alt="@(Alt ?? "Resim")"
         class="@(Class ?? "img-fluid")"
         style="@Style"
         width="@Width"
         height="@Height" />
}

@code {
    /// <summary>
    /// Resim URL'si (Örnek: /images/avatars/28165202398.jpg)
    /// </summary>
    [Parameter]
    public string? Src { get; set; }

    /// <summary>
    /// Alt text (Erişilebilirlik için)
    /// </summary>
    [Parameter]
    public string? Alt { get; set; }

    /// <summary>
    /// CSS Class'lar
    /// Örnek: "img-fluid rounded-circle"
    /// </summary>
    [Parameter]
    public string? Class { get; set; } = "img-fluid";

    /// <summary>
    /// Inline CSS style
    /// </summary>
    [Parameter]
    public string? Style { get; set; }

    /// <summary>
    /// Width attribute
    /// </summary>
    [Parameter]
    public string? Width { get; set; }

    /// <summary>
    /// Height attribute
    /// </summary>
    [Parameter]
    public string? Height { get; set; }

    /// <summary>
    /// Cache busting aktif mı? (varsayılan: true)
    /// Eski resimler için veya test amaçlı false yapabilirsin
    /// </summary>
    [Parameter]
    public bool EnableCacheBusting { get; set; } = true;

    private string? _cachedUrl;

    /// <summary>
    /// Server-side ImageCacheService'ten ETag'i alır
    /// ve URL'ye parametre olarak ekler
    ///
    /// Sonuç örneği: /images/avatars/28165202398.jpg?v=A1B2C3D4
    ///
    /// Resim güncellenirse ETag değişir: /images/avatars/28165202398.jpg?v=X9Y8Z7W6
    /// Browser URL'nin değiştiğini görüp yeni resmi indirir!
    /// </summary>
    private string GetCachedUrl()
    {
        if (string.IsNullOrEmpty(Src))
            return "/images/placeholder.png";

        // Cache busting devre dışı bırakıldıysa orijinal URL'yi döndür
        if (!EnableCacheBusting)
            return Src;

        try
        {
            // ⭐ ANAHTAR SATIR: Server'dan cache busting parametresi (ETag) al
            var etag = ImageCacheService.GetCacheBustParameter(Src);

            if (string.IsNullOrEmpty(etag) || etag == "notfound")
            {
                Logger.LogWarning("⚠️  Resim bulunamadı: {Src}", Src);
                return Src; // Yine de denemeyi sağla
            }

            if (etag == "error")
            {
                Logger.LogError("❌ ETag alınamadı: {Src}", Src);
                return Src;
            }

            // URL'ye ETag'i parametre olarak ekle
            // Örnek: /images/avatars/28165202398.jpg?v=A1B2C3D4
            var separator = Src.Contains('?') ? "&" : "?";
            _cachedUrl = $"{Src}{separator}v={etag}";

            Logger.LogDebug("✅ Cache-bust URL oluşturuldu: {CachedUrl}", _cachedUrl);
            return _cachedUrl;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "❌ Cache-bust URL oluşturulamadı: {Src}", Src);
            return Src; // Fallback
        }
    }

    /// <summary>
    /// Src parametresi değiştiğinde cache'lemiş URL'i sıfırla
    /// Böylece GetCachedUrl() yeniden çalışacak
    /// </summary>
    protected override void OnParametersSet()
    {
        _cachedUrl = null;
        base.OnParametersSet();
    }
}
